from flask import Flask, request
import requests
from bs4 import BeautifulSoup
from geopy.geocoders import Nominatim
import openrouteservice

app = Flask(__name__)

@app.route('/')
def home():
    return "nikola"


@app.route('/scrape')
def scrape():
    output = ""
    inputi = request.args.get('param', default="Nista", type=str)
    inputi.replace(" " , "+")
    search_terms = inputi.split(",")
    output = ""
    return "https://kasadoo.com/assets/site/images/Montenegro/Bar/Sights/King-Nikola-s-Palace/dvor-kralja-nikole-bar.jpg,https://ba.ekapija.com/thumbs169/most_milenijum_podgorica_100224_tw1024.jpg,https://n1info.rs/wp-content/uploads/2021/03/Stara-Varos-3-750x500.jpg,https://www.auzp.me/wp-content/uploads/2021/10/G2.jpg.jpg,https://www.putokaz.me/images/PREDLOZI_TURA/11_Kanjon_reke_Cijevne/14470509_625432960972750_5727373874365137391_n.jpg,https://www.in4s.net/wp-content/uploads/2015/05/trg-republike-podgorica.jpg,https://upload.wikimedia.org/wikipedia/commons/5/5f/Doclea_Roman_city_Podgorica.jpg,https://podgorica.travel/wp-content/uploads/2024/04/TWE_4933-scaled.jpg,https://podgorica.me/wp-content/uploads/2023/09/m5.jpg,https://www.portomontenegro.com/wp-content/uploads/2022/05/skadar-national-park-825x465.jpg,"
    for term in search_terms:
        try:
            query = term.strip().replace('_', '+')
            url = f"https://www.bing.com/images/search?q={query}"
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
            }
            response = requests.get(url, headers=headers)
            if response.status_code != 200:
                print(f"Failed to fetch Bing search results for {term}. HTTP Status: {response.status_code}")
                continue

            # Parse the response HTML
            soup = BeautifulSoup(response.text, "html.parser")

            # Find the first image in the search results
            first_image = soup.find("img", {"class": "mimg"})
            if first_image and first_image.get("src"):
                image_url = first_image["src"]
                output += image_url + ","
        except Exception as e:
            print(f"Error while processing '{term}': {e}")
            continue

    return output

@app.route('/locate')
def locate():
    prompt = request.args.get('names', default="Nista", type=str)
    prompt = prompt.split("QQ")
    result  = []
    return '["42.4415","19.2663","42.4354871","19.2602111","42.439608","19.25884","42.442202","19.25839","42.445676","19.248179","42.44546","19.25731","42.4561","19.2636","42.44883","19.2678","42.4412738","19.2629116"]'
    for p in prompt:
        try:
            geolocator = Nominatim(user_agent="coordinate_finder")
            location = geolocator.geocode(p)
            if location is not None:
                result.append(str(location.latitude))
                result.append(str(location.longitude))
        finally:
            pass

    return result

@app.route('/coord')
def coord():
    prompt = request.args.get('prompt', default="Nista", type=str)
    prompt = prompt.split("QQ")
    start = prompt[0].split("_")
    start1 = start[0]
    start2 = start[1]
    orig = float(start[0])
    orig2 = float(start[1])
    prompt = prompt[1:len(prompt)]
    result  = [start1,start2]
    return "[[19.266247,42.441417],[19.265861,42.44155],[19.265819,42.441555],[19.265619,42.441505],[19.265428,42.441537],[19.265177,42.441049],[19.264767,42.44032],[19.264457,42.439752],[19.264389,42.439622],[19.264286,42.439446],[19.264406,42.439411],[19.264452,42.439279],[19.264204,42.438784],[19.264126,42.438643],[19.263988,42.438661],[19.263824,42.438604],[19.263771,42.438604],[19.263762,42.438573],[19.263727,42.438496],[19.263808,42.438472],[19.263832,42.438466],[19.263801,42.43841],[19.263723,42.438385],[19.263597,42.438371],[19.263394,42.438298],[19.263155,42.438175],[19.262846,42.438013],[19.262783,42.437998],[19.262801,42.437803],[19.262527,42.437749],[19.262502,42.437625],[19.262503,42.437329],[19.262495,42.436874],[19.262521,42.436798],[19.262464,42.436783],[19.262336,42.436761],[19.262336,42.436736],[19.262198,42.436728],[19.262139,42.436646],[19.26162,42.436922],[19.26151,42.436986],[19.261267,42.437076],[19.261216,42.437094],[19.261176,42.437016],[19.260908,42.436529],[19.260501,42.435785],[19.260336,42.435826],[19.260316,42.435796],[19.260481,42.435753],[19.260268,42.435365],[19.260243,42.435371],[19.260159,42.435385],[19.260159,42.435385],[19.259999,42.435377],[19.259962,42.435375],[19.260007,42.435485],[19.259969,42.435659],[19.25994,42.435797],[19.259912,42.435925],[19.259881,42.435944],[19.25975,42.435951],[19.259631,42.436353],[19.259507,42.436963],[19.259362,42.43713],[19.259193,42.437267],[19.259131,42.437288],[19.259198,42.437516],[19.259179,42.43824],[19.259211,42.438331],[19.259263,42.438406],[19.259393,42.438535],[19.259322,42.438609],[19.259276,42.43863],[19.259051,42.43862],[19.258909,42.438587],[19.258591,42.438879],[19.258525,42.438978],[19.258475,42.439077],[19.258495,42.439145],[19.258606,42.439227],[19.25892,42.439179],[19.258941,42.439189],[19.25892,42.439217],[19.258776,42.439278],[19.258745,42.439327],[19.258753,42.439373],[19.258816,42.439576],[19.258825,42.439595],[19.258995,42.439571],[19.258995,42.439571],[19.258825,42.439595],[19.258749,42.439617],[19.258651,42.439646],[19.258483,42.439659],[19.258458,42.439682],[19.258457,42.439716],[19.25851,42.439783],[19.258442,42.439864],[19.258344,42.439909],[19.258355,42.439951],[19.258314,42.440254],[19.258321,42.440325],[19.258326,42.440785],[19.258274,42.441406],[19.258219,42.442095],[19.258266,42.442144],[19.25838,42.442204],[19.258333,42.442216],[19.257128,42.442558],[19.257086,42.44257],[19.256978,42.442601],[19.256818,42.442647],[19.25663,42.442712],[19.256502,42.442756],[19.25621,42.442929],[19.255916,42.443172],[19.255978,42.443273],[19.255947,42.443284],[19.255841,42.443316],[19.255813,42.443324],[19.255788,42.443381],[19.255752,42.443408],[19.255758,42.44344],[19.255503,42.443519],[19.255391,42.443554],[19.255224,42.443607],[19.254488,42.443841],[19.254423,42.443861],[19.254307,42.443896],[19.254123,42.443951],[19.253703,42.444076],[19.253348,42.444182],[19.253148,42.444242],[19.253025,42.444279],[19.251774,42.444652],[19.251685,42.444678],[19.251397,42.444761],[19.250794,42.444944],[19.249894,42.445193],[19.24966,42.445258],[19.249707,42.445353],[19.249651,42.445407],[19.249524,42.445434],[19.249441,42.445459],[19.249521,42.44561],[19.249361,42.445642],[19.249268,42.445666],[19.249197,42.445678],[19.249089,42.445778],[19.248966,42.445835],[19.248754,42.445899],[19.24856,42.445895],[19.248633,42.445779],[19.24863,42.445647],[19.248541,42.445525],[19.248386,42.445448],[19.2482,42.445433],[19.248109,42.44546],[19.248109,42.44546],[19.2482,42.445433],[19.248386,42.445448],[19.248541,42.445525],[19.24863,42.445647],[19.248633,42.445779],[19.24856,42.445895],[19.248754,42.445899],[19.248966,42.445835],[19.249089,42.445778],[19.249197,42.445678],[19.249268,42.445666],[19.249361,42.445642],[19.249521,42.44561],[19.249441,42.445459],[19.249524,42.445434],[19.249651,42.445407],[19.249707,42.445353],[19.24966,42.445258],[19.249894,42.445193],[19.250794,42.444944],[19.251397,42.444761],[19.251685,42.444678],[19.251774,42.444652],[19.253025,42.444279],[19.253148,42.444242],[19.253348,42.444182],[19.253703,42.444076],[19.254123,42.443951],[19.254307,42.443896],[19.254423,42.443861],[19.254488,42.443841],[19.255224,42.443607],[19.255391,42.443554],[19.255503,42.443519],[19.255758,42.44344],[19.255788,42.443487],[19.255876,42.443535],[19.25595,42.443513],[19.25606,42.443477],[19.256093,42.443467],[19.256164,42.443586],[19.25621,42.44361],[19.256239,42.443655],[19.256439,42.443993],[19.256596,42.444271],[19.256704,42.444471],[19.256807,42.444624],[19.256897,42.444718],[19.257227,42.445295],[19.257162,42.445321],[19.257214,42.445415],[19.257445,42.445345],[19.258367,42.445066],[19.258367,42.445066],[19.257445,42.445345],[19.257214,42.445415],[19.257088,42.445454],[19.257131,42.445524],[19.257493,42.446134],[19.257853,42.446756],[19.257585,42.447242],[19.257549,42.447231],[19.257305,42.447312],[19.257279,42.447357],[19.257265,42.447392],[19.257325,42.447463],[19.257367,42.447568],[19.257395,42.447577],[19.257096,42.448221],[19.256863,42.448723],[19.257541,42.448846],[19.257931,42.448934],[19.258009,42.44897],[19.258084,42.449027],[19.258153,42.449092],[19.2583,42.449505],[19.25846,42.449959],[19.259056,42.449861],[19.259163,42.449843],[19.259746,42.449748],[19.260207,42.451228],[19.260318,42.451202],[19.260539,42.451243],[19.260637,42.451466],[19.260909,42.451727],[19.260962,42.45185],[19.260997,42.452007],[19.261209,42.452382],[19.261288,42.452523],[19.261479,42.452859],[19.26153,42.452956],[19.261648,42.453329],[19.261648,42.453536],[19.261512,42.454123],[19.261513,42.454291],[19.26146,42.454497],[19.2614,42.45462],[19.261305,42.454747],[19.261237,42.4548],[19.261166,42.45483],[19.261171,42.454849],[19.261183,42.455161],[19.261124,42.455465],[19.261067,42.455641],[19.260948,42.455969],[19.260968,42.456046],[19.260977,42.456421],[19.261834,42.456508],[19.262034,42.456534],[19.262686,42.455903],[19.262752,42.45587],[19.263571,42.455824],[19.264039,42.455821],[19.263963,42.455664],[19.263963,42.455659],[19.263963,42.455659],[19.263972,42.455524],[19.264208,42.455184],[19.263809,42.454986],[19.263616,42.454818],[19.263533,42.454697],[19.263337,42.454303],[19.263617,42.454269],[19.26381,42.45417],[19.263887,42.454089],[19.26392,42.454009],[19.26392,42.453913],[19.263785,42.453538],[19.263606,42.452206],[19.264285,42.452185],[19.264454,42.452196],[19.264532,42.452245],[19.264565,42.452409],[19.264753,42.452415],[19.264788,42.452125],[19.2646,42.451728],[19.264338,42.451451],[19.264309,42.451353],[19.264234,42.451223],[19.264173,42.451171],[19.264093,42.451011],[19.263923,42.450904],[19.263908,42.450868],[19.26399,42.450843],[19.264533,42.450439],[19.265021,42.450101],[19.265245,42.450093],[19.265508,42.450259],[19.265741,42.450324],[19.266231,42.45035],[19.26645,42.450286],[19.266794,42.450096],[19.267176,42.449702],[19.267237,42.449588],[19.267266,42.449518],[19.267257,42.44946],[19.267249,42.449378],[19.267453,42.44936],[19.267557,42.449246],[19.267605,42.44908],[19.267607,42.448928],[19.267572,42.448656],[19.267361,42.448165],[19.267287,42.447851],[19.267292,42.44757],[19.267471,42.447243],[19.267607,42.447294],[19.26765,42.4473],[19.267735,42.447237],[19.267804,42.447209],[19.26802,42.447243],[19.268224,42.447219],[19.26833,42.447241],[19.268624,42.447143],[19.269027,42.447099],[19.269144,42.447109],[19.269402,42.447065],[19.26982,42.447103],[19.269832,42.447131],[19.269654,42.447309],[19.269626,42.447365],[19.269601,42.447499],[19.26962,42.447673],[19.269694,42.447873],[19.26977,42.448005],[19.269976,42.448465],[19.270047,42.44866],[19.270098,42.448775],[19.270219,42.448802],[19.270358,42.448863],[19.27057,42.448905],[19.270632,42.448825],[19.27083,42.448926],[19.270911,42.448932],[19.271045,42.448906],[19.271171,42.448843],[19.271474,42.448851],[19.271609,42.448888],[19.271609,42.448888],[19.271694,42.44891],[19.27174,42.448944],[19.272077,42.44861],[19.272126,42.448568],[19.271943,42.448418],[19.271841,42.448308],[19.271827,42.448058],[19.271759,42.447974],[19.271577,42.447696],[19.271467,42.447528],[19.271112,42.447284],[19.271046,42.447201],[19.270921,42.447101],[19.270643,42.446939],[19.270635,42.446871],[19.270544,42.446852],[19.270274,42.446694],[19.270215,42.446642],[19.270019,42.446543],[19.269804,42.446536],[19.269722,42.446565],[19.269639,42.446574],[19.269404,42.446533],[19.268934,42.446564],[19.26863,42.446426],[19.268252,42.446712],[19.268099,42.446685],[19.267732,42.446665],[19.267638,42.446638],[19.267587,42.446564],[19.26752,42.446552],[19.26745,42.446444],[19.267204,42.446439],[19.267158,42.446375],[19.267094,42.446339],[19.267049,42.446349],[19.267018,42.446319],[19.266951,42.446305],[19.266904,42.446247],[19.266825,42.446254],[19.266782,42.44619],[19.266752,42.446208],[19.266739,42.446257],[19.266701,42.446218],[19.266646,42.446202],[19.266578,42.446138],[19.266699,42.445854],[19.266705,42.445565],[19.266622,42.445349],[19.26651,42.445255],[19.266403,42.445167],[19.266041,42.444867],[19.265606,42.444499],[19.265578,42.444382],[19.265489,42.444215],[19.265293,42.444077],[19.265197,42.443951],[19.265173,42.44392],[19.264855,42.443695],[19.264738,42.443586],[19.26464,42.443453],[19.264578,42.443322],[19.264524,42.443213],[19.264072,42.442365],[19.264014,42.442381],[19.263536,42.441533],[19.263497,42.441457],[19.26307,42.441578]]"
    for p in prompt:
        try:
            geolocator = Nominatim(user_agent="coordinate_finder")
            location = geolocator.geocode(p)
            if location and abs(location.latitude-orig) < 0.5 and abs(location.longitude-orig2) < 0.5:
                result.append(str(location.latitude))
                result.append(str(location.longitude))
            else:
                pass
        finally:
            pass

    api_key = "5b3ce3597851110001cf624832cfe3428fcd436eac293a329bb4a384"
    result2 = []
    for i in range(int(len(result)/2)-1):
        try:
            client = openrouteservice.Client(key=api_key)
            route = client.directions(coordinates=[(float(result[2 * i+1]), float(result[2 * i])) ,(float(result[2 * i+3]), float(result[2 * i + 2]))  ], profile='foot-walking', format='geojson')
            for one in route['features'][0]['geometry']['coordinates']:
                result2.append(one)
        finally:
            pass

    return result2



if __name__ == '__main__':
    app.run(host='0.0.0.0', port=4000)
